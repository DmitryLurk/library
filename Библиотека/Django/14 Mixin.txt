Mixin - примесь Для единообразного оперирования переменными
Если у нескольких классов в приложении есть одни и те же переменные которые дублируются то их необходимо 
выносить в отдельный класс который будем потом подмешивать во все эти классы.
Mixin класс неследуется в базовый класс в первую очередь тк если один класс наследует и миксин и еще какой то класс
и они имеют одинаковые переменные в первую очередь будут браться те переменные которые идут в первом наследуемом классе

Обычно такие классы прописываются в корне каталога приложения в файле utils.py

from .models import *

class DataMixin:
    def get_user_context(self, **kwargs):
        context = kwargs
        cats = Category.objects.all()
        context['cats'] = cats
        if 'cat_selected' not in context:
            context['cat_selected'] = 0
        return context

Далее в классе представления в функции get_context_data добавляем

class WomenHome(DataMixin, ListView): не забываем унаследовать класс миксина

    model = Women
    template_name = 'women/index.html'
    context_object_name = 'posts'

def get_context_data(self, *, object_list=None, **kwargs):

        context = super().get_context_data(**kwargs)
        c_def = self.get_user_context(title = 'Главная страница') то что возвращает метод класса миксина через self(тк мы его унаследовали)
        # context["title"] = 'Главная страница' закомментировано
        # context["cat_selected"] = 0		закомментировано
        return dict(list(context.items()) + list(c_def.items())) И далее в ретерне обьединяем два словаря context и наш c_def  #context