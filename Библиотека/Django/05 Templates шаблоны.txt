https://www.youtube.com/watch?v=v3JM4yUFdNo&list=PLA0M1Bcd0w8xO_39zZll2u1lz_Q-Mwn1F&index=6&ab_channel=selfedu

Для отображения шаблонов используется метод render

def index(request):
    return render(request, 'здесь прописываем путь к файлу в папке templates вида имяприложения/название файла.html')
в каталоге проекта необходимо создать папку templates а в ней папку с названием приложения тк при сборке все папки templates приложений будут слиты в одну папку templates
Там создаются файлы представлений на html
----------------------------------------------------------------------
https://www.youtube.com/watch?v=Sr-1OBLge6s&list=PLA0M1Bcd0w8xO_39zZll2u1lz_Q-Mwn1F&index=11&ab_channel=selfedu
Пользовательские теги шаблонов
simple tags - простые теги
inclusion tags - включающие теги

теги используют для переиспользования кода в переменной

для этого создается папка templatestag в каталоге приложения проекта
в ней создается файл __init__.py чтобы сообщить что этот каталог является пакетом
далее создаем файл где будем прописывать логику работы тега названиеприложения_tags.py
 импортируем туда модели и модуль templates
from django import template
from папкаприложения.models import *

Далее заводим переменную как экземпляр класса library
register = template.Library()

и прописываем нужную нам функцию на которую накладываем декоратор с нашей переменной и simpltag ом

@register.simple_tag(name='getcats')	Можно переопределить имя для удобства использования
def get_categories():
    return Category.objects.all()	Функцию называем по своему. В данном случае она возвращает все записи из таблицы БД

Выше описан простой тег далее будет включающий тег
Может выглядить следующим образом


@register.inclusion_tag('названиеприложения/страницакоторуюформируеттег.html')	 	сюда будет передаваться return функции тега
def show_categories(sort=None, cat_selected=0):		здесь тег принимает аргументы и в коде это выглядит как {% show_categories 'name' cat_selected=cat_selected %}
    if not sort:					если аргумент sort передается то запись в переменную информации с БД передается сортированная если нет то по умолчанию
        cats = Category.objects.all() 
    else:
        cats = Category.objects.order_by(sort)

    return {"cats": cats, "cat_selected": cat_selected} здесь пременная cat_selected перепередается непосредственно в исполняющий код

Этот тег забирает в переменную и передает ее в отдельно созданную страницу html и благодаря этому в основном шаблоне 
мы прописываем только этот тег а отображается на проде уже весь код которые прописан в доп странице

Сам исполняющий код в отдельной html странице выглядит следующийм образом
{% for c in cats %} 			переменная cats это то что return функция тега и оно же является query set из БД
    {% if c.pk == cat_selected %}
    <li class="selected">{{ c.name }}</li>	здесь в if условии оговаривается как отображать надписи 
    {% else %}
    <li><a href="{{ c.get_absolute_url }}">{{ c.name }}</a></li>
    {% endif %}
{% endfor %}

если необходимо создать больше одной html страницы для использования их в тегах то имеет смысл создать отдельную папку для этих страниц что бы не мешать их с основными шаблонами